import{_ as s,c as a,o as n,b as e}from"./app.b796f998.js";const C=JSON.parse('{"title":"React Fiber","description":"","frontmatter":{"title":"React Fiber"},"headers":[{"level":2,"title":"为什么要引入 Fiber","slug":"为什么要引入-fiber","link":"#为什么要引入-fiber","children":[]},{"level":2,"title":"什么是 Fiber","slug":"什么是-fiber","link":"#什么是-fiber","children":[]},{"level":2,"title":"Fiber 是如何工作的","slug":"fiber-是如何工作的","link":"#fiber-是如何工作的","children":[]}],"relativePath":"knowledge/react/fiber.md"}'),l={name:"knowledge/react/fiber.md"},o=e(`<p>React 16 引入 Fiber 架构，这是 React 核心算法的重构</p><h2 id="为什么要引入-fiber" tabindex="-1">为什么要引入 Fiber <a class="header-anchor" href="#为什么要引入-fiber" aria-hidden="true">#</a></h2><p>我们知道，在浏览器中，页面是一帧一帧地绘制出来的，渲染的帧率与设备的刷新率保持一致，一般的频率是 60Hz（也就是每秒绘制60次），当每秒内绘制的帧数（FPS）超过60时，页面渲染是流畅的；而当FPS小于60时，会出现一定程度的卡顿现象</p><p>完整的一帧中，具体做的事情有这些：</p><ul><li>首先处理 <code>input</code>、<code>event</code> 事件（<code>I/O</code> 事件），让用户得到最早的反馈（<code>click</code>、<code>touch</code>、<code>wheel</code> 等）</li><li>接下来处理定时器，检查定时器是否到时间，并执行对应的回调</li><li>处理 <code>Begin Frame</code>（开始帧），即每一帧的事件，包括 <code>window.resize</code>、<code>scroll</code>、<code>media query change</code> 等</li><li>执行请求动画帧 <code>requestAnimationFrame（rAF）</code>，它会在每次绘制之前执行</li><li>进行 Layout 操作，包括计算布局和更新布局</li><li>进行绘制（paint）</li><li>浏览器绘制任务结束，进入空闲期（<code>Idle Peroid</code>），可以在此阶段执行 <code>requestIdleCallback</code> 注册的任务</li></ul><p>js 引擎和页面渲染引擎是在 <code>同一个渲染线程</code> 之内，两者是互斥关系。所以如果在某个阶段执行任务特别长，例如在处理定时器阶段或 <code>Begin Frame</code>阶段执行时间非常长，时间已经明显超过了16ms（<code>1000ms/60帧</code>），那么就会阻塞页面的渲染，从而出现卡顿现象</p><p>React 16 引入 Fiber 架构之前，React 采用递归遍历对比虚拟 DOM 树（传统方案是利用同步 <code>深度优先</code> 递归的堆栈），找出需要变动的节点，然后同步更新它们，这个过程 react 称之为 <code>reconcilation（协调）</code>。在这期间，react 会一直占用浏览器资源，会导致用户触发的事件不能及时响应，即出现页面卡顿的现象</p><p>这种方案存在的问题：</p><ul><li>因为这种遍历方案属于递归调用，执行栈会越来越深</li><li>递归遍历不能中断，如果中断也不可恢复</li><li>递归如果非常深，JS 的运行就会阻塞其他主线程任务的执行，造成页面卡顿</li></ul><p>因此，React 希望能够彻底解决主线程长时间占用问题，于是引入了 Fiber 来改变这种不可控的现状，把 <code>渲染/更新</code> 过程拆分为一个个小块的任务，通过合理的调度机制来调控时间，指定任务执行的时机，从而降低页面卡顿的概率，提升页面交互体验。通过 <code>Fiber 架构</code>，让 reconcilation 过程变得可被中断。适时地让出 <code>CPU 执行权</code>，可以让浏览器及时地响应用户的交互</p><p>既然 React 16 使用 Fiber 进行架构层优化，但 Vue 是没有 Fiber 架构的，这是为什么呢？原因就是二者的优化思路不同：</p><ol><li>Vue 是基于 <code>template</code> 和 <code>watcher</code> 的组件级更新，把每个更新任务分割得足够小，不需要使用到 Fiber 架构，将任务进行更细粒度的拆分</li><li>React 中不管是哪里调用了 <code>setState</code>，都是从根节点开始更新的，更新任务还是很大，需要使用到 Fiber 将大任务分割为多个小任务，可以中断和恢复，不阻塞主进程执行高优先级的任务</li></ol><h2 id="什么是-fiber" tabindex="-1">什么是 Fiber <a class="header-anchor" href="#什么是-fiber" aria-hidden="true">#</a></h2><p>Fiber 可以理解为一种 <code>执行单元</code>，它本身也是一种 <code>数据结构</code></p><ol><li><p>从执行单元角度去理解：每次（在一帧中）执行完一个任务，react 就会去检查还剩多少时间，如果没有时间则将控制权交还给浏览器。结合上面的完整的一帧：</p><ul><li>react 会向浏览器请求调度，浏览器在一帧中是否还有空闲时间，无时间则将控制权交还浏览器（进入下一帧）</li><li>有时间就去判断是否有执行任务单元，无任务则将控制权交还浏览器（响应用户操作或等待进入下一帧）</li><li>有任务执行任务单元，执行完毕后再次检测这一帧中是否还有空闲时间，回到上面两步（循环）</li></ul><p>Fiber 可以理解为将原本的整棵树的递归对比的大任务拆分成一个一个的小执行单元（小任务），小任务当然是一次性执行完的，不存在暂停或中断；但每块小任务执行完毕后可以通过条件判定将控制权移交给浏览器响应用户的操作，而不用像之前那样需要等到整个大任务执行完毕才能响应</p></li><li><p>数据结构层面理解：</p><blockquote><p>文件位置：<a href="https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiber.new.js" target="_blank" rel="noreferrer">packages/react-reconciler/src/ReactFiber.js</a></p></blockquote><p>一个 <code>fiber</code> 就是一个 <code>js对象</code>，每一个 React 元素就对应一个 Fiber 对象，它是基于链表实现的，主要利用其 <code>child</code>、<code>return</code>、<code>sibling</code> 属性来实现 React Fiber 机制（可控中断操作等）；fiber 对象的主要属性如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 标识 fiber 类型的标签 // 文件位置：packages/shared/ReactWorkTags.js</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">tag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WorkTag</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 指向父节点</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">return</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 指向子节点</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">child</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 指向兄弟节点</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">sibling</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 在开始执行时设置 props 值</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">pendingProps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 在结束时设置的 props 值</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">memoizedProps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 当前 state</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">memoizedState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Effect 类型，详情查看以下 effectTag</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">effectTag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SideEffectTag</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// effect 节点指针，指向下一个 effect</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">nextEffect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// effect list 是单向链表，第一个 effect</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">firstEffect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// effect list 是单向链表，最后一个 effect</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">lastEffect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// work 的过期时间，可用于标识一个 work 优先级顺序</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">expirationTime</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExpirationTime</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ... 还有一些其他属性</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ol><h2 id="fiber-是如何工作的" tabindex="-1">Fiber 是如何工作的 <a class="header-anchor" href="#fiber-是如何工作的" aria-hidden="true">#</a></h2><blockquote><p>TODO~</p></blockquote>`,17),p=[o];function c(r,t,i,F,y,D){return n(),a("div",null,p)}const A=s(l,[["render",c]]);export{C as __pageData,A as default};
