import{_ as s,c as n,o as a,b as l}from"./app.ccfb43da.js";const A=JSON.parse('{"title":"代码规范","description":"","frontmatter":{"title":"代码规范"},"headers":[{"level":2,"title":"最终方案","slug":"最终方案","link":"#最终方案","children":[]},{"level":2,"title":"🏴‍☠️ Eslint","slug":"🏴‍☠️-eslint","link":"#🏴‍☠️-eslint","children":[]},{"level":2,"title":"Git Flow","slug":"git-flow","link":"#git-flow","children":[]},{"level":2,"title":"Husky 添加 git-hooks","slug":"husky-添加-git-hooks","link":"#husky-添加-git-hooks","children":[]},{"level":2,"title":"实现 Push & Release 脚本","slug":"实现-push-release-脚本","link":"#实现-push-release-脚本","children":[]}],"relativePath":"knowledge/engineering/lint.md"}'),o={name:"knowledge/engineering/lint.md"},p=l(`<div class="tip custom-block"><p class="custom-block-title">Lint</p><p>掘金：<a href="https://juejin.cn/post/7111759355766603784/" target="_blank" rel="noreferrer">前端工程化之规范化 🔗</a> —— 2022-06-22</p></div><h2 id="最终方案" tabindex="-1">最终方案 <a class="header-anchor" href="#最终方案" aria-hidden="true">#</a></h2><h2 id="🏴‍☠️-eslint" tabindex="-1">🏴‍☠️ Eslint <a class="header-anchor" href="#🏴‍☠️-eslint" aria-hidden="true">#</a></h2><p>使用 <code>eslint</code> 进行格式化，且禁用 <code>prettier</code> 的格式化，否则两者会存在冲突</p><ul><li>Install</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">pnpm i eslint-config-suressk -D</span></span>
<span class="line"></span></code></pre></div><ul><li>Config <code>.eslintrc</code></li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">suressk</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li><code>vscode config</code>，创建 <code>.vscode/settings.json</code> 文件：</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* 禁用 prettier */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">prettier.enable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">editor.codeActionsOnSave</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">source.fixAll.eslint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="git-flow" tabindex="-1">Git Flow <a class="header-anchor" href="#git-flow" aria-hidden="true">#</a></h2><p>代码编写需要规范，代码分支管理同样也需要拥有流程和规范</p><blockquote><p><a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noreferrer">A successful Git branching model 🔗：</a></p></blockquote><img src="https://nvie.com/img/git-model@2x.png" width="50%"><p>据上图描述，我们一般分为 5 条常用分支方便统一管理：</p><ul><li><p><code>Production</code> 分支</p><blockquote><p>也就是默认的 <code>master</code> 分支（或重命名的主分支名，如 <code>main</code>），这个分支用于发布到最新的生产环境的代码,<br> 包含 <code>release</code> 分支发布的版本<br> 这个分支的代码只能从其他分支 <code>合并</code> 过来，而不在此分支上直接修改</p></blockquote></li><li><p><code>Release</code> 分支</p><blockquote><p>它是用于每次发布代码的分支，发版时就按规范标准创建一个 <code>release</code> 分支，并打上 <code>tag</code> 发布<br> 再将发布完成的代码合入 <code>主分支</code>，它一般是由 <code>Develop</code> 分支测试通过之后创建而来</p></blockquote></li><li><p><code>Develop</code> 分支</p><blockquote><p>它是我们的主开发分支，包含所有要发布到下一个 <code>Release</code> 的代码，这个主要合并于其他分支，比如 <code>Feature</code> 分支</p></blockquote></li><li><p><code>Feature</code> 分支</p><blockquote><p>它是用来开发一个新的功能，一旦开发完成，我们合并回 <code>Develop</code> 分支，并进入下一个 <code>Release</code></p></blockquote></li><li><p><code>Hotfix</code> 分支</p><blockquote><p>当生产环境的代码出现 <code>bug</code> 需要紧急修复时，我们会从 <code>主分支</code> 切一个 <code>hotfix</code> 分支出来进行修复<br> 测试完毕之后合入 <code>主分支</code> 和 <code>Develop</code> 分支，并进入下一个 <code>Release</code>（合并完毕后通常会删掉此分支）</p></blockquote></li></ul><p>综上，示例分支名大致如下：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># master branch</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">main</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># release branch with version-number</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">release/v1.0.5</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># new features of Iteration-version-number</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">feat/v3.9</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#676E95;"># new feature of achieving reactivity</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">feat/reactivity</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># hotfix branch of issues-number</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">fix/issues-31</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#676E95;"># Often occurs when multiple people collaborate</span></span>
<span class="line"><span style="color:#676E95;"># hotfix branch of someone to fix the issue-number</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">fix/saul-issues-31</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#676E95;"># hotfix branch of bug-name and issue-number</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">fix/saul-type-call-31</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><h2 id="husky-添加-git-hooks" tabindex="-1">Husky 添加 git-hooks <a class="header-anchor" href="#husky-添加-git-hooks" aria-hidden="true">#</a></h2><ul><li><p>安装相关的 <code>package</code></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># husky 添加 git-hooks</span></span>
<span class="line"><span style="color:#676E95;"># lint-staged： 检测 committed 文件进行格式化处理（应与上面 eslint 结合的）</span></span>
<span class="line"><span style="color:#676E95;"># conventional-changelog-cli： 用于生成 changelog.md 文档</span></span>
<span class="line"><span style="color:#A6ACCD;">pnpm i husky lint-staged conventional-changelog-cli -D</span></span>
<span class="line"></span></code></pre></div></li><li><p>添加 <code>.husky</code> 文件，添加 <code>git-hooks</code></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 创建 .husky 目录，初始化 git-hooks</span></span>
<span class="line"><span style="color:#A6ACCD;">npx husky install</span></span>
<span class="line"><span style="color:#676E95;"># 添加 pre-commit hook</span></span>
<span class="line"><span style="color:#A6ACCD;">npx husky-init</span></span>
<span class="line"></span></code></pre></div></li><li><p>修改 <code>.husky/pre-commit</code> 文件</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="color:#82AAFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#C3E88D;">dirname -- </span><span style="color:#89DDFF;">&quot;$</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">&quot;)</span><span style="color:#C3E88D;">/_/husky.sh</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># npm test  # 这句删掉，改为下面这行，进行代码格式化检测</span></span>
<span class="line"><span style="color:#676E95;"># 这句需要结合 eslint 或 prettier 来进行代码格式化</span></span>
<span class="line"><span style="color:#A6ACCD;">npx lint-staged</span></span>
<span class="line"></span></code></pre></div></li><li><p>添加 <code>commit-msg</code> hook，并修改 <code>.husky/commit-msg</code> 文件</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 添加 commit-msg hook，&quot;$1&quot; 参数不会被此命令写进 .husky/commit-msg 文件</span></span>
<span class="line"><span style="color:#676E95;"># 下面需要手动添加，否则将拿不到 commit message 信息</span></span>
<span class="line"><span style="color:#A6ACCD;">npx husky add .husky/commit-msg </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">npx ts-node scripts/verify-commit.ts &quot;$1&quot;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="color:#82AAFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#C3E88D;">dirname -- </span><span style="color:#89DDFF;">&quot;$</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">&quot;)</span><span style="color:#C3E88D;">/_/husky.sh</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">npx ts-node scripts/verify-commit.ts </span><span style="color:#89DDFF;">&quot;$</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># 添加 &quot;$1&quot; 参数</span></span>
<span class="line"></span></code></pre></div></li><li><p><code>package.json</code> 配置 <code>git-hooks</code>（好像不配置也没什么影响），<code>lint-staged</code> 需要配置</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// package.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">husky</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">hooks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">pre-commit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">commit-msg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts-node scripts/verify-commit.ts</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint . --fix</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul><h2 id="实现-push-release-脚本" tabindex="-1">实现 Push &amp; Release 脚本 <a class="header-anchor" href="#实现-push-release-脚本" aria-hidden="true">#</a></h2><ul><li><p>创建 <code>scripts</code> 目录，用于实现执行 <code>shell</code> 命令的脚本文件，通过 <code>terminal 交互</code> 完成 <code>commit</code> 信息格式验证，<code>release</code> 版本确认等功能</p></li><li><p>安装相关的 <code>package</code></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># ts-node: node 环境直接执行 ts 文件</span></span>
<span class="line"><span style="color:#676E95;"># execa: 用于执行 脚本 的包</span></span>
<span class="line"><span style="color:#676E95;"># prompts: 以交互式的方式，获取命令行交互的内容</span></span>
<span class="line"><span style="color:#676E95;"># picocolors: 美化命令行 log 内容</span></span>
<span class="line"><span style="color:#A6ACCD;">pnpm i ts-node execa prompts picocolors -D</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># semver: 用于专门分析 Semantic Version（语义化版本）的工具（release）</span></span>
<span class="line"><span style="color:#676E95;"># minimist: 用于解析获得 process 命令行参数</span></span>
<span class="line"><span style="color:#676E95;"># fs-extra: 用于读取文件，可直接读取为 json 格式，省去 fs 读取之后还要转化为 json</span></span>
<span class="line"><span style="color:#A6ACCD;">pnpm i semver minimist fs-extra @types/minimist @types/fs-extra -D</span></span>
<span class="line"></span></code></pre></div></li><li><p>创建 <code>scripts/tsconfig.json</code> 文件，用于在 <code>node</code> 环境实现 <code>ts-node</code> 可以编译执行 <code>ESM</code> 格式的 <code>ts</code> 脚本 <a href="/knowledge/engineering/tsconfig.html">tsconfig 配置说明 🔗</a></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CommonJS</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">target</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ES2020</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">moduleResolution</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">strict</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">esModuleInterop</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">skipLibCheck</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">noUnusedLocals</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">/* 未用到的引用 */</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">forceConsistentCasingInFileNames</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>在 <code>package.json</code> 中创建要执行的脚本命令，例如：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// package.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">push</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts-node scripts/push.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">release</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts-node scripts/release.ts</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">/* ... other command */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>在 <code>scripts</code> 目录下创建我们 上面配置命令 要执行的 <code>ts</code> 文件</p><p><strong>⛩ 详细示例可见 <a href="https://github.com/suressk/sure-utils/tree/main/scripts" target="_blank" rel="noreferrer">Github： */scripts/* 🔗</a></strong></p><p>这里写几个示例的 <code>utils</code> 方法：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> minimist </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">minimist</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> execa </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">execa</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> fsExtra </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs-extra</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Options</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ExecaOptions</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">execa</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// get shell command arguments</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> args </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">minimist</span><span style="color:#A6ACCD;">(process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// run shell command</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">bin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExecaOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// such as: run(&#39;git&#39;, [&#39;commit&#39;, &#39;-m&#39;, commitMsg])</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">execa</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">bin</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> stdio</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">inherit</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">opts</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// update &#39;package.json&#39; version</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateVersion</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pkgPath</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pkg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fsExtra</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readJSONSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pkgPath</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">pkg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">version</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">version</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">writeFileSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pkgPath</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pkg</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>后续我们就只需要通过 <code>yarn push</code> 命令，就可以替换如下的 <code>git</code> 命令操作：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git add </span><span style="color:#82AAFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># git add -A</span></span>
<span class="line"><span style="color:#A6ACCD;">git commit -m </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">feat(scripts/*): add shell commands</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">git push</span></span>
<span class="line"></span></code></pre></div></li></ul>`,22),e=[p];function c(t,r,D,y,F,i){return a(),n("div",null,e)}const d=s(o,[["render",c]]);export{A as __pageData,d as default};
