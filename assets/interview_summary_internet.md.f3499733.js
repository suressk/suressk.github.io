import{_ as t,c as e,o as l,b as s}from"./app.b796f998.js";const g=JSON.parse('{"title":"网络基础知识","description":"","frontmatter":{"title":"网络基础知识"},"headers":[{"level":2,"title":"OSI 七层模型","slug":"osi-七层模型","link":"#osi-七层模型","children":[]},{"level":2,"title":"HTTP & HTTPS","slug":"http-https","link":"#http-https","children":[{"level":3,"title":"HTTP","slug":"http","link":"#http","children":[]},{"level":3,"title":"HTTPS","slug":"https","link":"#https","children":[]},{"level":3,"title":"二者的区别","slug":"二者的区别","link":"#二者的区别","children":[]}]},{"level":2,"title":"HTTP 报文","slug":"http-报文","link":"#http-报文","children":[{"level":3,"title":"简单请求与非简单请求","slug":"简单请求与非简单请求","link":"#简单请求与非简单请求","children":[]},{"level":3,"title":"GET 和 POST 的区别","slug":"get-和-post-的区别","link":"#get-和-post-的区别","children":[]}]},{"level":2,"title":"UDP & TCP","slug":"udp-tcp","link":"#udp-tcp","children":[{"level":3,"title":"UDP","slug":"udp","link":"#udp","children":[]},{"level":3,"title":"TCP","slug":"tcp","link":"#tcp","children":[]},{"level":3,"title":"二者的区别","slug":"二者的区别-1","link":"#二者的区别-1","children":[]}]}],"relativePath":"interview/summary/internet.md"}'),n={name:"interview/summary/internet.md"},a=s(`<h2 id="osi-七层模型" tabindex="-1">OSI 七层模型 <a class="header-anchor" href="#osi-七层模型" aria-hidden="true">#</a></h2><p>OSI （<code>Open System Interconnect</code>）模型全称为开放式通信系统互连参考模型，是国际标准化组织 ( ISO ) 提出的一个试图使各种计算机在世界范围内互连为网络的标准框架</p><p><code>OSI</code> 将计算机网络体系结构划分为七层，每一层实现各自的功能和协议，并完成与相邻层的接口通信</p><p>从上到下依次是：<code>应用层</code>、<code>表示层</code>、<code>会话层</code>、<code>传输层</code>、<code>网络层</code>、<code>数据链路层</code>、<code>物理层</code></p><ul><li>应用层：通过应用程序间的交互来完成特定的网络应用，定义了应用进程之间的交互规则（主要协议有：<code>HTTP</code>、<code>DNS</code>、<code>SMTP</code>等）；数据单元为 <code>报文</code></li><li>表示层：使通信的应用程序能够解释交换数据的含义，提供的服务主要包括数据压缩，数据加密以及数据描述</li><li>会话层：负责建立、管理和终止表示层实体之间的通信会话，提供了数据交换的定界和同步功能</li><li>传输层：主要任务是为两台主机进程之间的通信提供服务（主要协议有：<code>TCP</code>、<code>UDP</code>）</li><li>网络层：选择合适的网间路由和交换节点，确保数据按时成功传送</li><li>数据链路层：将网络层交下来的 IP数据报组装成帧，在两个相邻节点间的链路上传送帧</li><li>物理层：主要任务是确定与传输媒体的接口的一些特性</li></ul><h2 id="http-https" tabindex="-1"><code>HTTP &amp; HTTPS</code> <a class="header-anchor" href="#http-https" aria-hidden="true">#</a></h2><h3 id="http" tabindex="-1"><code>HTTP</code> <a class="header-anchor" href="#http" aria-hidden="true">#</a></h3><p><code>HTTP</code> (<code>HyperText Transfer Protocol</code>)，即超文本运输协议，是实现网络通信的一种规范</p><p>它是一个传输协议，即将数据由 <code>A 发送给 B</code> 或由 <code>B 发送给 A</code>，并且 A 与 B 之间能够存放很多第三方。传输的数据并不是计算机底层中的二进制包，而是完整的、有意义的数据（如 <code>HTML 文件</code>、<code>图片文件</code> 等）</p><p>在实际应用中，HTTP 常被用于在浏览器和服务器之间传递信息，以 <code>明文</code> 方式发送内容，不提供任何方式的数据加密</p><p>特点如下：</p><ul><li><code>支持客户端/服务端（C/S）模式</code></li><li><code>简单快速</code>：客户向服务器请求服务时，只需传送请求方法和路径。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快</li><li><code>灵活</code>：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记</li><li><code>无连接</code>：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间</li><li><code>无状态</code>：HTTP协议无法根据之前的状态进行本次的请求处理</li></ul><h3 id="https" tabindex="-1"><code>HTTPS</code> <a class="header-anchor" href="#https" aria-hidden="true">#</a></h3><p>在上面说到 <code>HTTP</code> 是以明文的形式进行数据传输，这并不安全，而 <code>HTTPS</code> 协议就是为了解决这个问题而出现的。为了保证这些隐私数据能加密传输，让HTTP运行在安全的SSL/TLS协议（<code>Secure Sockets Layer 安全套接字协议</code> / <code>Transport Layer Security 继任者传输层安全</code>）上，即<code>HTTPS = HTTP + SSL/TLS</code>，通过 CA 证书来验证服务器的身份</p><table><thead><tr><th style="text-align:center;">客户端</th><th style="text-align:left;">-</th><th style="text-align:center;">服务端</th></tr></thead><tbody><tr><td style="text-align:center;">Client</td><td style="text-align:left;">发起 ➡️ <code>https</code> 请求</td><td style="text-align:center;"><code>Server</code></td></tr><tr><td style="text-align:center;">Client</td><td style="text-align:left;">返回 ⬅️ CA 证书（包含公钥）</td><td style="text-align:center;"><code>Server</code></td></tr><tr><td style="text-align:center;">Client</td><td style="text-align:left;">产生随机对称密钥（客户端）</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">Client</td><td style="text-align:left;">验证证书通过后，使用得到的公钥对<code>对称密钥</code>加密</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">Client</td><td style="text-align:left;">发送 ➡️ 加密后的对称密钥</td><td style="text-align:center;"><code>Server</code></td></tr><tr><td style="text-align:center;">-</td><td style="text-align:left;">使用初次产生的私钥解密得到对称密钥（服务器端）</td><td style="text-align:center;"><code>Server</code></td></tr><tr><td style="text-align:center;">Client</td><td style="text-align:left;">通信 ⬅️ ➡️ 对称密钥加密的密文</td><td style="text-align:center;"><code>Server</code></td></tr></tbody></table><h3 id="二者的区别" tabindex="-1">二者的区别 <a class="header-anchor" href="#二者的区别" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:left;"><code>HTTP</code></th><th style="text-align:center;">vs</th><th style="text-align:left;"><code>HTTPS</code></th></tr></thead><tbody><tr><td style="text-align:left;">明文通信</td><td style="text-align:center;">-</td><td style="text-align:left;">使用 <code>SSL/TLS协议</code> 进行了加密处理，相对更安全</td></tr><tr><td style="text-align:left;">默认端口是 80</td><td style="text-align:center;">-</td><td style="text-align:left;">默认端口是 443</td></tr><tr><td style="text-align:left;">不涉及混合加密操作</td><td style="text-align:center;">-</td><td style="text-align:left;">涉及加密（混合加密）和多次连接，性能相对 <code>HTTP</code> 要差</td></tr><tr><td style="text-align:left;">无证书</td><td style="text-align:center;">-</td><td style="text-align:left;">CA 证书需要付费</td></tr></tbody></table><h2 id="http-报文" tabindex="-1"><code>HTTP</code> 报文 <a class="header-anchor" href="#http-报文" aria-hidden="true">#</a></h2><p><strong>客户端</strong> 发送一个 <code>HTTP</code> 请求到服务器的请求消息包括以下格式：<code>请求行（request line）</code>、<code>请求头部（header）</code>、<code>空行</code> 和 <code>请求数据</code> 四个部分组成</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">POST </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">hello HTTP</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">1.1</span></span>
<span class="line"><span style="color:#A6ACCD;">User</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Agent</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> curl</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">7.16</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> libcurl</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">7.16</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> OpenSSL</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">0.9</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">7l zlib</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">1.2</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#FFCB6B;">Host</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> www</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">example</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">com</span></span>
<span class="line"><span style="color:#A6ACCD;">Accept</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Language</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> en</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/* 请求数据 */</span></span>
<span class="line"></span></code></pre></div><p><strong>服务器</strong> 响应消息也由四个部分组成，分别是：<code>状态行</code>、<code>消息报头</code>、<code>空行</code> 和 <code>响应正文</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">HTTP</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">1.1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#A6ACCD;"> OK</span></span>
<span class="line"><span style="color:#FFCB6B;">Date</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Mon</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">27</span><span style="color:#A6ACCD;"> Jul </span><span style="color:#F78C6C;">2009</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">28</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">53</span><span style="color:#A6ACCD;"> GMT</span></span>
<span class="line"><span style="color:#FFCB6B;">Server</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Apache</span></span>
<span class="line"><span style="color:#A6ACCD;">Last</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Modified</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Wed</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22</span><span style="color:#A6ACCD;"> Jul </span><span style="color:#F78C6C;">2009</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">19</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">15</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">56</span><span style="color:#A6ACCD;"> GMT</span></span>
<span class="line"><span style="color:#FFCB6B;">ETag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">34aa387-d-1568eb00</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">Accept</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Ranges</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> bytes</span></span>
<span class="line"><span style="color:#A6ACCD;">Content</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Length</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">51</span></span>
<span class="line"><span style="color:#FFCB6B;">Vary</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Accept</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Encoding</span></span>
<span class="line"><span style="color:#A6ACCD;">Content</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> text</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">plain</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/* 响应正文 */</span></span>
<span class="line"></span></code></pre></div><p>HTTP1.0 定义了三种请求方法：<code>GET</code>, <code>POST</code> 和 <code>HEAD</code> 方法<br> HTTP1.1 新增了六种请求方法：<code>OPTIONS</code>、<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>、<code>TRACE</code> 和 <code>CONNECT</code> 方法</p><table><thead><tr><th style="text-align:left;">Methods</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">GET</td><td style="text-align:left;">请求指定的页面信息，并返回实体主体</td></tr><tr><td style="text-align:left;">POST</td><td style="text-align:left;">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改</td></tr><tr><td style="text-align:left;">HEAD</td><td style="text-align:left;">类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取 <code>报头</code></td></tr><tr><td style="text-align:left;">PUT</td><td style="text-align:left;">从客户端向服务器传送的数据取代指定的文档的内容</td></tr><tr><td style="text-align:left;">DELETE</td><td style="text-align:left;">删除请求</td></tr><tr><td style="text-align:left;">CONNECT</td><td style="text-align:left;">HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器</td></tr><tr><td style="text-align:left;">OPTIONS</td><td style="text-align:left;">预检请求</td></tr><tr><td style="text-align:left;">TRACE</td><td style="text-align:left;">回显服务器收到的请求，主要用于测试或诊断</td></tr><tr><td style="text-align:left;">PATCH</td><td style="text-align:left;">是对 PUT 方法的补充，用来对已知资源进行局部更新</td></tr></tbody></table><h3 id="简单请求与非简单请求" tabindex="-1">简单请求与非简单请求 <a class="header-anchor" href="#简单请求与非简单请求" aria-hidden="true">#</a></h3><p><a href="/interview/summary/strands.html#_6-说说-cors-跨站脚本攻击防范？">见 <code>cors-跨站脚本攻击防范？</code> 🔗</a></p><h3 id="get-和-post-的区别" tabindex="-1">GET 和 POST 的区别 <a class="header-anchor" href="#get-和-post-的区别" aria-hidden="true">#</a></h3><p>待续...</p><h2 id="udp-tcp" tabindex="-1">UDP &amp; TCP <a class="header-anchor" href="#udp-tcp" aria-hidden="true">#</a></h2><h3 id="udp" tabindex="-1">UDP <a class="header-anchor" href="#udp" aria-hidden="true">#</a></h3><p>UDP（<code>User Datagram Protocol</code>），用户数据包协议，是一个简单的 <strong>面向数据报的通信协议</strong>，即对应用层交下来的报文，不合并，不拆分，只是在其上面加上首部后就交给了下面的网络层</p><blockquote><p>UDP报头包括4个字段，每个字段占用2个字节（即16个二进制位），标题短，开销小</p></blockquote><p>特点：</p><ul><li>提供 <strong>面向无连接</strong> 的通信服务</li><li>传输途中出现丢包的情况，不负责重发</li><li>数据包的到达顺序可能会出现乱序的情况，且UDP没有纠正的功能</li><li>无法进行流量控制等避免网络拥塞行为（它是将应用程序发来的数据在收到的那一刻，立即按照原样发送到网络上的一种机制）</li></ul><h3 id="tcp" tabindex="-1">TCP <a class="header-anchor" href="#tcp" aria-hidden="true">#</a></h3><p>TCP（<code>Transmission Control Protocol</code>），传输控制协议，是一种可靠、面向字节流的通信协议，把上面应用层交下来的数据看成无结构的 <strong>字节流</strong> 来发送</p><blockquote><p>TCP报文首部有20个字节，额外开销大</p></blockquote><p>特点：</p><ul><li>作为一种 <strong>面向有连接</strong> 的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费</li><li>充分地实现了数据传输时各种控制功能，可以进行丢包时的 <strong>重发控制</strong>，还可以对次序乱掉的分包进行 <strong>顺序控制</strong></li><li>在 IP 这种无连接的网络上也能够实现 <strong>高可靠性的通信</strong>（ 主要通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现）</li></ul><h3 id="二者的区别-1" tabindex="-1">二者的区别 <a class="header-anchor" href="#二者的区别-1" aria-hidden="true">#</a></h3><p>二者均为 <strong>传输层</strong> 协议</p><table><thead><tr><th style="text-align:center;">-</th><th style="text-align:left;">TCP</th><th style="text-align:left;">UDP</th></tr></thead><tbody><tr><td style="text-align:center;">可靠性</td><td style="text-align:left;">可靠</td><td style="text-align:left;">不可靠</td></tr><tr><td style="text-align:center;">连接性</td><td style="text-align:left;">面向连接（三次握手、四次挥手）</td><td style="text-align:left;">无连接（尽可能传递数据）</td></tr><tr><td style="text-align:center;">报文</td><td style="text-align:left;">面向字节流</td><td style="text-align:left;">面向报文</td></tr><tr><td style="text-align:center;">效率</td><td style="text-align:left;">传输效率低</td><td style="text-align:left;">传输效率高</td></tr><tr><td style="text-align:center;">双共性</td><td style="text-align:left;">点对点全双工通信</td><td style="text-align:left;">一对一、一对多、多对一、多对多</td></tr><tr><td style="text-align:center;">流量控制</td><td style="text-align:left;">滑动窗口</td><td style="text-align:left;">无</td></tr><tr><td style="text-align:center;">拥塞控制</td><td style="text-align:left;">慢开始、拥塞避免、快重传、快恢复</td><td style="text-align:left;">无</td></tr><tr><td style="text-align:center;">--&gt;</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table>`,42),o=[a];function d(c,p,r,i,y,C){return l(),e("div",null,o)}const D=t(n,[["render",d]]);export{g as __pageData,D as default};
